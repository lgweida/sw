write a jdbc client to connect to a MSSQL server with database config defined in JDBS_Connection.ini
I'll help you create a JDBC client to connect to a Microsoft SQL Server using configuration from a .ini file. Here's a complete implementation:

1. Configuration File (JDBS_Connection.ini)
Create a file named JDBS_Connection.ini with the following content:

ini
[database]
server=localhost
port=1433
databaseName=YourDatabase
username=your_username
password=your_password
instanceName=  # Optional - leave empty if not using named instance
trustServerCertificate=true
encrypt=false
loginTimeout=30
2. Database Configuration Class
java
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class DatabaseConfig {
    private String server;
    private int port;
    private String databaseName;
    private String username;
    private String password;
    private String instanceName;
    private boolean trustServerCertificate;
    private boolean encrypt;
    private int loginTimeout;

    public DatabaseConfig(String configFile) throws IOException {
        Properties props = new Properties();
        try (FileInputStream fis = new FileInputStream(configFile)) {
            props.load(fis);
        }
        
        this.server = props.getProperty("server", "localhost");
        this.port = Integer.parseInt(props.getProperty("port", "1433"));
        this.databaseName = props.getProperty("databaseName", "");
        this.username = props.getProperty("username", "");
        this.password = props.getProperty("password", "");
        this.instanceName = props.getProperty("instanceName", "");
        this.trustServerCertificate = Boolean.parseBoolean(
            props.getProperty("trustServerCertificate", "true"));
        this.encrypt = Boolean.parseBoolean(props.getProperty("encrypt", "false"));
        this.loginTimeout = Integer.parseInt(props.getProperty("loginTimeout", "30"));
    }

    // Getters
    public String getServer() { return server; }
    public int getPort() { return port; }
    public String getDatabaseName() { return databaseName; }
    public String getUsername() { return username; }
    public String getPassword() { return password; }
    public String getInstanceName() { return instanceName; }
    public boolean isTrustServerCertificate() { return trustServerCertificate; }
    public boolean isEncrypt() { return encrypt; }
    public int getLoginTimeout() { return loginTimeout; }

    public String getConnectionUrl() {
        StringBuilder url = new StringBuilder();
        url.append("jdbc:sqlserver://").append(server).append(":").append(port);
        
        if (!instanceName.isEmpty()) {
            url.append(";instanceName=").append(instanceName);
        }
        
        url.append(";databaseName=").append(databaseName);
        url.append(";trustServerCertificate=").append(trustServerCertificate);
        url.append(";encrypt=").append(encrypt);
        url.append(";loginTimeout=").append(loginTimeout);
        
        return url.toString();
    }
}
3. JDBC Client Class
java
import java.sql.*;
import java.io.IOException;

public class MSSQLClient {
    private DatabaseConfig config;
    private Connection connection;

    public MSSQLClient(String configFile) throws IOException {
        this.config = new DatabaseConfig(configFile);
    }

    public boolean connect() {
        try {
            // Load SQL Server JDBC driver
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            
            // Establish connection
            connection = DriverManager.getConnection(
                config.getConnectionUrl(), 
                config.getUsername(), 
                config.getPassword()
            );
            
            System.out.println("Connected to SQL Server successfully!");
            return true;
            
        } catch (ClassNotFoundException e) {
            System.err.println("SQL Server JDBC Driver not found: " + e.getMessage());
            return false;
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
            return false;
        }
    }

    public void disconnect() {
        if (connection != null) {
            try {
                connection.close();
                System.out.println("Disconnected from SQL Server.");
            } catch (SQLException e) {
                System.err.println("Error closing connection: " + e.getMessage());
            }
        }
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        Statement statement = connection.createStatement();
        return statement.executeQuery(sql);
    }

    public int executeUpdate(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        Statement statement = connection.createStatement();
        return statement.executeUpdate(sql);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        return connection.prepareStatement(sql);
    }

    // Test database connection
    public boolean testConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                String testQuery = "SELECT 1 AS test_result";
                ResultSet rs = executeQuery(testQuery);
                if (rs.next()) {
                    System.out.println("Database connection test: PASSED");
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            System.err.println("Connection test failed: " + e.getMessage());
            return false;
        }
    }

    // Get database metadata
    public void printDatabaseInfo() {
        try {
            if (connection != null && !connection.isClosed()) {
                DatabaseMetaData metaData = connection.getMetaData();
                System.out.println("Database Product: " + metaData.getDatabaseProductName());
                System.out.println("Database Version: " + metaData.getDatabaseProductVersion());
                System.out.println("Driver Name: " + metaData.getDriverName());
                System.out.println("Driver Version: " + metaData.getDriverVersion());
            }
        } catch (SQLException e) {
            System.err.println("Error getting database info: " + e.getMessage());
        }
    }
}
4. Example Usage Class
java
import java.sql.ResultSet;
import java.sql.SQLException;

public class MSSQLClientExample {
    public static void main(String[] args) {
        MSSQLClient client = null;
        
        try {
            // Initialize client with configuration file
            client = new MSSQLClient("JDBS_Connection.ini");
            
            // Connect to database
            if (client.connect()) {
                // Test connection
                client.testConnection();
                
                // Print database information
                client.printDatabaseInfo();
                
                // Example: Execute a simple query
                System.out.println("\nExecuting sample query:");
                String query = "SELECT name FROM sys.databases WHERE database_id > 4";
                ResultSet rs = client.executeQuery(query);
                
                System.out.println("User databases:");
                while (rs.next()) {
                    System.out.println("- " + rs.getString("name"));
                }
                
                // Example: Using prepared statement
                String preparedQuery = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = ?";
                var pstmt = client.prepareStatement(preparedQuery);
                pstmt.setString(1, "BASE TABLE");
                
                ResultSet tables = pstmt.executeQuery();
                System.out.println("\nTables in database:");
                while (tables.next()) {
                    System.out.println("- " + tables.getString("TABLE_NAME"));
                }
            }
            
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (client != null) {
                client.disconnect();
            }
        }
    }
}
5. Maven Dependencies (pom.xml)
Add this to your pom.xml file:

xml
<dependencies>
    <dependency>
        <groupId>com.microsoft.sqlserver</groupId>
        <artifactId>mssql-jdbc</artifactId>
        <version>12.4.1.jre11</version>
    </dependency>
</dependencies>
6. Gradle Dependencies (build.gradle)
gradle
dependencies {
    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.4.1.jre11'
}
Key Features:
Configuration Management: Reads database settings from INI file

Connection Management: Handles connection establishment and cleanup

Error Handling: Comprehensive exception handling

Flexible Query Execution: Supports both simple queries and prepared statements

Connection Testing: Includes connection validation methods

Metadata Access: Provides database information retrieval

Usage Instructions:
Update the JDBS_Connection.ini file with your actual SQL Server details

Ensure the SQL Server JDBC driver is in your classpath (via Maven/Gradle)

Make sure SQL Server is configured to allow TCP/IP connections

Run the MSSQLClientExample class to test the connection

This client provides a robust foundation for connecting to MS SQL Server with configurable settings from an INI file.

how to run the example with CLI
Here's how to run the JDBC client example using the command line:

1. Project Structure Setup
First, create the following directory structure:

text
mssql-jdbc-client/
├── src/
│   └── MSSQLClient.java
│   └── DatabaseConfig.java
│   └── MSSQLClientExample.java
├── lib/
├── JDBS_Connection.ini
└── run.sh (or run.bat for Windows)
2. Manual Compilation and Execution
Step 1: Download the JDBC Driver
Download the SQL Server JDBC driver JAR file:

bash
# Create lib directory
mkdir lib

# Download the driver (choose one method)
# Method 1: Using wget (Linux/Mac)
wget -O lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar

# Method 2: Using curl (Linux/Mac)
curl -o lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar
Step 2: Create the Configuration File
Create JDBS_Connection.ini in the project root:

ini
[database]
server=localhost
port=1433
databaseName=master
username=sa
password=your_password
trustServerCertificate=true
encrypt=false
loginTimeout=30
Step 3: Compile the Java Files
bash
# Compile all Java files with JDBC driver in classpath
javac -cp "lib/*" src/*.java -d .

# Or if you want to keep classes in a separate directory
mkdir classes
javac -cp "lib/*" src/*.java -d classes
Step 4: Run the Example
bash
# Run with the JDBC driver in classpath
java -cp ".;lib/*" MSSQLClientExample

# On Linux/Mac:
java -cp ".:lib/*" MSSQLClientExample

# If using classes directory:
java -cp "classes:lib/*" MSSQLClientExample
3. Automation Scripts
For Linux/Mac: Create run.sh
bash
#!/bin/bash

# Script to compile and run MSSQL JDBC Client

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo -e "${GREEN}MSSQL JDBC Client Runner${NC}"

# Check if JDBS_Connection.ini exists
if [ ! -f "JDBS_Connection.ini" ]; then
    echo -e "${RED}Error: JDBS_Connection.ini not found!${NC}"
    echo "Please create the configuration file first."
    exit 1
fi

# Check if JDBC driver exists
if [ ! -f "lib/mssql-jdbc-12.4.1.jre11.jar" ]; then
    echo -e "${RED}JDBC driver not found. Downloading...${NC}"
    mkdir -p lib
    curl -o lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar
fi

# Create classes directory if it doesn't exist
mkdir -p classes

# Compile Java files
echo "Compiling Java files..."
javac -cp "lib/*" -d classes src/*.java

if [ $? -eq 0 ]; then
    echo -e "${GREEN}Compilation successful!${NC}"
    
    # Run the example
    echo "Running MSSQL Client Example..."
    java -cp "classes:lib/*" MSSQLClientExample
else
    echo -e "${RED}Compilation failed!${NC}"
    exit 1
fi
For Windows: Create run.bat
batch
@echo off
title MSSQL JDBC Client Runner

echo MSSQL JDBC Client Runner

:: Check if JDBS_Connection.ini exists
if not exist "JDBS_Connection.ini" (
    echo Error: JDBS_Connection.ini not found!
    echo Please create the configuration file first.
    pause
    exit /b 1
)

:: Check if JDBC driver exists
if not exist "lib\mssql-jdbc-12.4.1.jre11.jar" (
    echo JDBC driver not found. Please download it manually and place in lib folder.
    echo Download from: https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar
    pause
    exit /b 1
)

:: Create classes directory if it doesn't exist
if not exist "classes" mkdir classes

:: Compile Java files
echo Compiling Java files...
javac -cp "lib\*" -d classes src\*.java

if %errorlevel% equ 0 (
    echo Compilation successful!
    
    :: Run the example
    echo Running MSSQL Client Example...
    java -cp "classes;lib\*" MSSQLClientExample
) else (
    echo Compilation failed!
)

pause
4. Make the Script Executable (Linux/Mac)
bash
chmod +x run.sh
5. Run with the Script
bash
# Linux/Mac
./run.sh

# Windows
run.bat
6. Complete File Structure with All Files
Directory Structure:
text
mssql-jdbc-client/
├── src/
│   ├── DatabaseConfig.java
│   ├── MSSQLClient.java
│   └── MSSQLClientExample.java
├── lib/
│   └── mssql-jdbc-12.4.1.jre11.jar
├── JDBS_Connection.ini
├── run.sh
└── run.bat
Quick Start Commands:
bash
# 1. Create project directory
mkdir mssql-jdbc-client
cd mssql-jdbc-client

# 2. Create source directory
mkdir src

# 3. Create all Java files in src/ directory
# (Copy the Java code from previous response into respective files)

# 4. Create JDBS_Connection.ini with your database details

# 5. Download JDBC driver
mkdir lib
wget -O lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar

# 6. Make script executable and run
chmod +x run.sh
./run.sh
7. Troubleshooting Common Issues
If you get "Class not found" errors:
bash
# Check if JAR file is correctly referenced
java -cp ".:lib/mssql-jdbc-12.4.1.jre11.jar" MSSQLClientExample
If you get connection errors:
Verify SQL Server is running

Check if TCP/IP is enabled in SQL Server Configuration Manager

Ensure the username/password in JDBS_Connection.ini are correct

Check if the server allows remote connections

If using different Java version:
bash
# Check your Java version
java -version

# Download appropriate JDBC driver version
# For Java 8: use version 12.4.1.jre8
wget -O lib/mssql-jdbc-12.4.1.jre8.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre8/mssql-jdbc-12.4.1.jre8.jar
This approach gives you a complete command-line workflow for running the MSSQL JDBC client without needing an IDE or build tool.

I have java version 8 and java version 21
Since you have both Java 8 and Java 21, you'll need to use the appropriate JDBC driver version and specify which Java version to use. Here's how to set it up:

1. Download Both JDBC Driver Versions
bash
# Create lib directory
mkdir lib

# Download Java 8 compatible driver
wget -O lib/mssql-jdbc-12.4.1.jre8.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre8/mssql-jdbc-12.4.1.jre8.jar

# Download Java 11+ compatible driver (works with Java 21)
wget -O lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar
2. Enhanced run.sh Script for Multiple Java Versions
bash
#!/bin/bash

# Script to compile and run MSSQL JDBC Client with Java version selection

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}MSSQL JDBC Client Runner${NC}"
echo "Available Java versions:"
echo "1. Java 8"
echo "2. Java 21"
echo -n "Select Java version (1 or 2): "
read java_choice

case $java_choice in
    1)
        JAVA_CMD="java"
        JAVAC_CMD="javac"
        JDBC_JAR="lib/mssql-jdbc-12.4.1.jre8.jar"
        JAVA_VERSION="8"
        ;;
    2)
        # Try to find Java 21 specifically
        if command -v java21 &> /dev/null; then
            JAVA_CMD="java21"
            JAVAC_CMD="javac21"
        elif command -v java &> /dev/null && java -version 2>&1 | grep -q "21"; then
            JAVA_CMD="java"
            JAVAC_CMD="javac"
        else
            echo -e "${YELLOW}Java 21 not found in PATH, using default java command${NC}"
            JAVA_CMD="java"
            JAVAC_CMD="javac"
        fi
        JDBC_JAR="lib/mssql-jdbc-12.4.1.jre11.jar"
        JAVA_VERSION="21"
        ;;
    *)
        echo -e "${RED}Invalid selection. Using Java 8 as default.${NC}"
        JAVA_CMD="java"
        JAVAC_CMD="javac"
        JDBC_JAR="lib/mssql-jdbc-12.4.1.jre8.jar"
        JAVA_VERSION="8"
        ;;
esac

echo -e "${GREEN}Using Java $JAVA_VERSION${NC}"

# Verify Java installation
if ! command -v $JAVA_CMD &> /dev/null; then
    echo -e "${RED}Error: $JAVA_CMD not found!${NC}"
    exit 1
fi

echo "Java version:"
$JAVA_CMD -version

# Check if JDBS_Connection.ini exists
if [ ! -f "JDBS_Connection.ini" ]; then
    echo -e "${RED}Error: JDBS_Connection.ini not found!${NC}"
    echo "Creating a template configuration file..."
    cat > JDBS_Connection.ini << EOL
[database]
server=localhost
port=1433
databaseName=master
username=sa
password=your_password_here
trustServerCertificate=true
encrypt=false
loginTimeout=30
EOL
    echo -e "${YELLOW}Please edit JDBS_Connection.ini with your database credentials${NC}"
    exit 1
fi

# Check if JDBC driver exists
if [ ! -f "$JDBC_JAR" ]; then
    echo -e "${RED}JDBC driver for Java $JAVA_VERSION not found at $JDBC_JAR${NC}"
    exit 1
fi

# Create classes directory if it doesn't exist
mkdir -p classes

# Compile Java files
echo "Compiling Java files with Java $JAVA_VERSION..."
$JAVAC_CMD -cp "$JDBC_JAR" -d classes src/*.java

if [ $? -eq 0 ]; then
    echo -e "${GREEN}Compilation successful!${NC}"
    
    # Run the example
    echo "Running MSSQL Client Example with Java $JAVA_VERSION..."
    $JAVA_CMD -cp "classes:$JDBC_JAR" MSSQLClientExample
else
    echo -e "${RED}Compilation failed!${NC}"
    exit 1
fi
3. Enhanced run.bat for Windows
batch
@echo off
title MSSQL JDBC Client Runner

echo MSSQL JDBC Client Runner
echo.
echo Available Java versions:
echo 1. Java 8
echo 2. Java 21
echo.
set /p java_choice="Select Java version (1 or 2): "

if "%java_choice%"=="1" (
    set JAVA_CMD=java
    set JAVAC_CMD=javac
    set JDBC_JAR=lib\mssql-jdbc-12.4.1.jre8.jar
    set JAVA_VERSION=8
) else if "%java_choice%"=="2" (
    set JAVA_CMD=java
    set JAVAC_CMD=javac
    set JDBC_JAR=lib\mssql-jdbc-12.4.1.jre11.jar
    set JAVA_VERSION=21
) else (
    echo Invalid selection. Using Java 8 as default.
    set JAVA_CMD=java
    set JAVAC_CMD=javac
    set JDBC_JAR=lib\mssql-jdbc-12.4.1.jre8.jar
    set JAVA_VERSION=8
)

echo Using Java %JAVA_VERSION%

:: Check if JDBS_Connection.ini exists
if not exist "JDBS_Connection.ini" (
    echo Error: JDBS_Connection.ini not found!
    echo Creating a template configuration file...
    (
        echo [database]
        echo server=localhost
        echo port=1433
        echo databaseName=master
        echo username=sa
        echo password=your_password_here
        echo trustServerCertificate=true
        echo encrypt=false
        echo loginTimeout=30
    ) > JDBS_Connection.ini
    echo Please edit JDBS_Connection.ini with your database credentials
    pause
    exit /b 1
)

:: Check if JDBC driver exists
if not exist "%JDBC_JAR%" (
    echo JDBC driver for Java %JAVA_VERSION% not found at %JDBC_JAR%
    pause
    exit /b 1
)

:: Create classes directory if it doesn't exist
if not exist "classes" mkdir classes

:: Compile Java files
echo Compiling Java files with Java %JAVA_VERSION%...
%JAVAC_CMD% -cp "%JDBC_JAR%" -d classes src\*.java

if %errorlevel% equ 0 (
    echo Compilation successful!
    
    :: Run the example
    echo Running MSSQL Client Example with Java %JAVA_VERSION%...
    %JAVA_CMD% -cp "classes;%JDBC_JAR%" MSSQLClientExample
) else (
    echo Compilation failed!
)

pause
4. Manual Commands for Specific Java Versions
For Java 8:
bash
# Compile with Java 8
javac -cp "lib/mssql-jdbc-12.4.1.jre8.jar" -d classes src/*.java

# Run with Java 8
java -cp "classes:lib/mssql-jdbc-12.4.1.jre8.jar" MSSQLClientExample
For Java 21:
bash
# Compile with Java 21
javac -cp "lib/mssql-jdbc-12.4.1.jre11.jar" -d classes src/*.java

# Run with Java 21
java -cp "classes:lib/mssql-jdbc-12.4.1.jre11.jar" MSSQLClientExample
5. Check Your Java Installation
To see which Java versions you have available:

bash
# List all Java installations
/usr/libexec/java_home -V  # Mac
update-java-alternatives -l  # Linux (Debian/Ubuntu)
alternatives --config java  # Linux (RedHat/CentOS)

# On Windows, check in Control Panel or use:
java -version
where java
6. If You Need to Specify Exact Java Path
If the automatic detection doesn't work, you can modify the script to use specific paths:

For Linux/Mac:
bash
# Example with specific paths
JAVA_8_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_351.jdk/Contents/Home"
JAVA_21_HOME="/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home"

# Use specific version
export JAVA_HOME=$JAVA_8_HOME
$JAVA_HOME/bin/javac -cp "$JDBC_JAR" -d classes src/*.java
$JAVA_HOME/bin/java -cp "classes:$JDBC_JAR" MSSQLClientExample
For Windows:
batch
:: Example with specific paths
set JAVA_8_HOME="C:\Program Files\Java\jdk1.8.0_351"
set JAVA_21_HOME="C:\Program Files\Java\jdk-21"

:: Use specific version
set JAVA_HOME=%JAVA_8_HOME%
%JAVA_HOME%\bin\javac -cp "%JDBC_JAR%" -d classes src\*.java
%JAVA_HOME%\bin\java -cp "classes;%JDBC_JAR%" MSSQLClientExample
7. Project Structure
text
mssql-jdbc-client/
├── src/
│   ├── DatabaseConfig.java
│   ├── MSSQLClient.java
│   └── MSSQLClientExample.java
├── lib/
│   ├── mssql-jdbc-12.4.1.jre8.jar
│   └── mssql-jdbc-12.4.1.jre11.jar
├── JDBS_Connection.ini
├── run.sh
└── run.bat
Usage:
bash
# Make script executable (Linux/Mac)
chmod +x run.sh

# Run and choose Java version
./run.sh

# Or run manually with specific version
./run_java8.sh    # Create separate scripts if needed
./run_java21.sh
This setup will automatically detect and use the appropriate JDBC driver version based on your Java version selection, ensuring compatibility with both Java 8 and Java 21.

please create bash script to create all the files with correct directory structure
Here's a comprehensive bash script that creates the complete project structure with all the necessary files:

create-mssql-client.sh
bash
#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Function to create directory if it doesn't exist
create_dir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
        print_status "Created directory: $1"
    else
        print_warning "Directory already exists: $1"
    fi
}

# Function to create file with content
create_file() {
    if [ ! -f "$1" ]; then
        cat > "$1" << EOL
$2
EOL
        print_status "Created file: $1"
    else
        print_warning "File already exists: $1"
    fi
}

# Main script
print_step "Starting MSSQL JDBC Client Project Setup..."

# Create project directory
PROJECT_DIR="mssql-jdbc-client"
create_dir "$PROJECT_DIR"
cd "$PROJECT_DIR"

print_step "Creating directory structure..."
create_dir "src"
create_dir "lib"
create_dir "classes"

print_step "Creating Java source files..."

# DatabaseConfig.java
create_file "src/DatabaseConfig.java" 'import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class DatabaseConfig {
    private String server;
    private int port;
    private String databaseName;
    private String username;
    private String password;
    private String instanceName;
    private boolean trustServerCertificate;
    private boolean encrypt;
    private int loginTimeout;

    public DatabaseConfig(String configFile) throws IOException {
        Properties props = new Properties();
        try (FileInputStream fis = new FileInputStream(configFile)) {
            props.load(fis);
        }
        
        this.server = props.getProperty("server", "localhost");
        this.port = Integer.parseInt(props.getProperty("port", "1433"));
        this.databaseName = props.getProperty("databaseName", "");
        this.username = props.getProperty("username", "");
        this.password = props.getProperty("password", "");
        this.instanceName = props.getProperty("instanceName", "");
        this.trustServerCertificate = Boolean.parseBoolean(
            props.getProperty("trustServerCertificate", "true"));
        this.encrypt = Boolean.parseBoolean(props.getProperty("encrypt", "false"));
        this.loginTimeout = Integer.parseInt(props.getProperty("loginTimeout", "30"));
    }

    // Getters
    public String getServer() { return server; }
    public int getPort() { return port; }
    public String getDatabaseName() { return databaseName; }
    public String getUsername() { return username; }
    public String getPassword() { return password; }
    public String getInstanceName() { return instanceName; }
    public boolean isTrustServerCertificate() { return trustServerCertificate; }
    public boolean isEncrypt() { return encrypt; }
    public int getLoginTimeout() { return loginTimeout; }

    public String getConnectionUrl() {
        StringBuilder url = new StringBuilder();
        url.append("jdbc:sqlserver://").append(server).append(":").append(port);
        
        if (!instanceName.isEmpty()) {
            url.append(";instanceName=").append(instanceName);
        }
        
        url.append(";databaseName=").append(databaseName);
        url.append(";trustServerCertificate=").append(trustServerCertificate);
        url.append(";encrypt=").append(encrypt);
        url.append(";loginTimeout=").append(loginTimeout);
        
        return url.toString();
    }
}'

# MSSQLClient.java
create_file "src/MSSQLClient.java" 'import java.sql.*;
import java.io.IOException;

public class MSSQLClient {
    private DatabaseConfig config;
    private Connection connection;

    public MSSQLClient(String configFile) throws IOException {
        this.config = new DatabaseConfig(configFile);
    }

    public boolean connect() {
        try {
            // Load SQL Server JDBC driver
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            
            // Establish connection
            connection = DriverManager.getConnection(
                config.getConnectionUrl(), 
                config.getUsername(), 
                config.getPassword()
            );
            
            System.out.println("Connected to SQL Server successfully!");
            return true;
            
        } catch (ClassNotFoundException e) {
            System.err.println("SQL Server JDBC Driver not found: " + e.getMessage());
            return false;
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
            return false;
        }
    }

    public void disconnect() {
        if (connection != null) {
            try {
                connection.close();
                System.out.println("Disconnected from SQL Server.");
            } catch (SQLException e) {
                System.err.println("Error closing connection: " + e.getMessage());
            }
        }
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        Statement statement = connection.createStatement();
        return statement.executeQuery(sql);
    }

    public int executeUpdate(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        Statement statement = connection.createStatement();
        return statement.executeUpdate(sql);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        return connection.prepareStatement(sql);
    }

    // Test database connection
    public boolean testConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                String testQuery = "SELECT 1 AS test_result";
                ResultSet rs = executeQuery(testQuery);
                if (rs.next()) {
                    System.out.println("Database connection test: PASSED");
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            System.err.println("Connection test failed: " + e.getMessage());
            return false;
        }
    }

    // Get database metadata
    public void printDatabaseInfo() {
        try {
            if (connection != null && !connection.isClosed()) {
                DatabaseMetaData metaData = connection.getMetaData();
                System.out.println("Database Product: " + metaData.getDatabaseProductName());
                System.out.println("Database Version: " + metaData.getDatabaseProductVersion());
                System.out.println("Driver Name: " + metaData.getDriverName());
                System.out.println("Driver Version: " + metaData.getDriverVersion());
            }
        } catch (SQLException e) {
            System.err.println("Error getting database info: " + e.getMessage());
        }
    }
}'

# MSSQLClientExample.java
create_file "src/MSSQLClientExample.java" 'import java.sql.ResultSet;
import java.sql.SQLException;

public class MSSQLClientExample {
    public static void main(String[] args) {
        MSSQLClient client = null;
        
        try {
            // Initialize client with configuration file
            client = new MSSQLClient("JDBS_Connection.ini");
            
            // Connect to database
            if (client.connect()) {
                // Test connection
                client.testConnection();
                
                // Print database information
                client.printDatabaseInfo();
                
                // Example: Execute a simple query
                System.out.println("\\nExecuting sample query:");
                String query = "SELECT name FROM sys.databases WHERE database_id > 4";
                ResultSet rs = client.executeQuery(query);
                
                System.out.println("User databases:");
                while (rs.next()) {
                    System.out.println("- " + rs.getString("name"));
                }
                
                // Example: Using prepared statement
                String preparedQuery = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = ?";
                var pstmt = client.prepareStatement(preparedQuery);
                pstmt.setString(1, "BASE TABLE");
                
                ResultSet tables = pstmt.executeQuery();
                System.out.println("\\nTables in database:");
                while (tables.next()) {
                    System.out.println("- " + tables.getString("TABLE_NAME"));
                }
            }
            
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (client != null) {
                client.disconnect();
            }
        }
    }
}'

print_step "Creating configuration file..."

# JDBS_Connection.ini
create_file "JDBS_Connection.ini" '[database]
server=localhost
port=1433
databaseName=master
username=sa
password=your_password_here
instanceName=
trustServerCertificate=true
encrypt=false
loginTimeout=30'

print_step "Creating run scripts..."

# run.sh for Linux/Mac
create_file "run.sh" '#!/bin/bash

# Script to compile and run MSSQL JDBC Client with Java version selection

# Colors for output
RED=\"\\033[0;31m\"
GREEN=\"\\033[0;32m\"
YELLOW=\"\\033[1;33m\"
NC=\"\\033[0m\" # No Color

echo -e \"${GREEN}MSSQL JDBC Client Runner${NC}\"
echo \"Available Java versions:\"
echo \"1. Java 8\"
echo \"2. Java 21\"
echo -n \"Select Java version (1 or 2): \"
read java_choice

case $java_choice in
    1)
        JAVA_CMD=\"java\"
        JAVAC_CMD=\"javac\"
        JDBC_JAR=\"lib/mssql-jdbc-12.4.1.jre8.jar\"
        JAVA_VERSION=\"8\"
        ;;
    2)
        # Try to find Java 21 specifically
        if command -v java21 &> /dev/null; then
            JAVA_CMD=\"java21\"
            JAVAC_CMD=\"javac21\"
        elif command -v java &> /dev/null && java -version 2>&1 | grep -q \"21\"; then
            JAVA_CMD=\"java\"
            JAVAC_CMD=\"javac\"
        else
            echo -e \"${YELLOW}Java 21 not found in PATH, using default java command${NC}\"
            JAVA_CMD=\"java\"
            JAVAC_CMD=\"javac\"
        fi
        JDBC_JAR=\"lib/mssql-jdbc-12.4.1.jre11.jar\"
        JAVA_VERSION=\"21\"
        ;;
    *)
        echo -e \"${RED}Invalid selection. Using Java 8 as default.${NC}\"
        JAVA_CMD=\"java\"
        JAVAC_CMD=\"javac\"
        JDBC_JAR=\"lib/mssql-jdbc-12.4.1.jre8.jar\"
        JAVA_VERSION=\"8\"
        ;;
esac

echo -e \"${GREEN}Using Java $JAVA_VERSION${NC}\"

# Verify Java installation
if ! command -v $JAVA_CMD &> /dev/null; then
    echo -e \"${RED}Error: $JAVA_CMD not found!${NC}\"
    exit 1
fi

echo \"Java version:\"
$JAVA_CMD -version

# Check if JDBS_Connection.ini exists
if [ ! -f \"JDBS_Connection.ini\" ]; then
    echo -e \"${RED}Error: JDBS_Connection.ini not found!${NC}\"
    echo \"Creating a template configuration file...\"
    cat > JDBS_Connection.ini << EOL
[database]
server=localhost
port=1433
databaseName=master
username=sa
password=your_password_here
trustServerCertificate=true
encrypt=false
loginTimeout=30
EOL
    echo -e \"${YELLOW}Please edit JDBS_Connection.ini with your database credentials${NC}\"
    exit 1
fi

# Check if JDBC driver exists
if [ ! -f \"$JDBC_JAR\" ]; then
    echo -e \"${RED}JDBC driver for Java $JAVA_VERSION not found at $JDBC_JAR${NC}\"
    exit 1
fi

# Create classes directory if it doesn'\''t exist
mkdir -p classes

# Compile Java files
echo \"Compiling Java files with Java $JAVA_VERSION...\"
$JAVAC_CMD -cp \"$JDBC_JAR\" -d classes src/*.java

if [ $? -eq 0 ]; then
    echo -e \"${GREEN}Compilation successful!${NC}\"
    
    # Run the example
    echo \"Running MSSQL Client Example with Java $JAVA_VERSION...\"
    $JAVA_CMD -cp \"classes:$JDBC_JAR\" MSSQLClientExample
else
    echo -e \"${RED}Compilation failed!${NC}\"
    exit 1
fi'

# run.bat for Windows
create_file "run.bat" '@echo off
title MSSQL JDBC Client Runner

echo MSSQL JDBC Client Runner
echo.
echo Available Java versions:
echo 1. Java 8
echo 2. Java 21
echo.
set /p java_choice=\"Select Java version (1 or 2): \"

if \"%java_choice%\"==\"1\" (
    set JAVA_CMD=java
    set JAVAC_CMD=javac
    set JDBC_JAR=lib\\mssql-jdbc-12.4.1.jre8.jar
    set JAVA_VERSION=8
) else if \"%java_choice%\"==\"2\" (
    set JAVA_CMD=java
    set JAVAC_CMD=javac
    set JDBC_JAR=lib\\mssql-jdbc-12.4.1.jre11.jar
    set JAVA_VERSION=21
) else (
    echo Invalid selection. Using Java 8 as default.
    set JAVA_CMD=java
    set JAVAC_CMD=javac
    set JDBC_JAR=lib\\mssql-jdbc-12.4.1.jre8.jar
    set JAVA_VERSION=8
)

echo Using Java %JAVA_VERSION%

:: Check if JDBS_Connection.ini exists
if not exist \"JDBS_Connection.ini\" (
    echo Error: JDBS_Connection.ini not found!
    echo Creating a template configuration file...
    (
        echo [database]
        echo server=localhost
        echo port=1433
        echo databaseName=master
        echo username=sa
        echo password=your_password_here
        echo trustServerCertificate=true
        echo encrypt=false
        echo loginTimeout=30
    ) > JDBS_Connection.ini
    echo Please edit JDBS_Connection.ini with your database credentials
    pause
    exit /b 1
)

:: Check if JDBC driver exists
if not exist \"%JDBC_JAR%\" (
    echo JDBC driver for Java %JAVA_VERSION% not found at %JDBC_JAR%
    pause
    exit /b 1
)

:: Create classes directory if it doesn'\''t exist
if not exist \"classes\" mkdir classes

:: Compile Java files
echo Compiling Java files with Java %JAVA_VERSION%...
%JAVAC_CMD% -cp \"%JDBC_JAR%\" -d classes src\\*.java

if %errorlevel% equ 0 (
    echo Compilation successful!
    
    :: Run the example
    echo Running MSSQL Client Example with Java %JAVA_VERSION%...
    %JAVA_CMD% -cp \"classes;%JDBC_JAR%\" MSSQLClientExample
) else (
    echo Compilation failed!
)

pause'

print_step "Creating download script for JDBC drivers..."

# download-drivers.sh
create_file "download-drivers.sh" '#!/bin/bash

# Script to download MSSQL JDBC drivers

echo "Downloading MSSQL JDBC drivers..."

# Download Java 8 compatible driver
echo "Downloading Java 8 driver..."
wget -O lib/mssql-jdbc-12.4.1.jre8.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre8/mssql-jdbc-12.4.1.jre8.jar

# Download Java 11+ compatible driver (works with Java 21)
echo "Downloading Java 11+ driver..."
wget -O lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar

echo "Download complete!"
echo "Files downloaded:"
ls -la lib/'

print_step "Creating README file..."

# README.md
create_file "README.md" '# MSSQL JDBC Client

A Java JDBC client for connecting to Microsoft SQL Server with configuration file support.

## Project Structure
mssql-jdbc-client/
├── src/ # Java source files
│ ├── DatabaseConfig.java
│ ├── MSSQLClient.java
│ └── MSSQLClientExample.java
├── lib/ # JDBC driver JAR files
├── classes/ # Compiled Java classes
├── JDBS_Connection.ini # Database configuration
├── run.sh # Linux/Mac run script
├── run.bat # Windows run script
├── download-drivers.sh # Driver download script
└── README.md # This file

text

## Setup Instructions

1. **Download JDBC drivers:**
   ```bash
   chmod +x download-drivers.sh
   ./download-drivers.sh
Configure database connection:
Edit JDBS_Connection.ini with your SQL Server details:

ini
server=your_server_host
port=1433
databaseName=your_database
username=your_username
password=your_password
Run the application:

Linux/Mac:

bash
chmod +x run.sh
./run.sh
Windows:

cmd
run.bat
Requirements
Java 8 or Java 21

Microsoft SQL Server JDBC driver (automatically downloaded)

SQL Server instance accessible from your network

Features
Configuration file support

Connection pooling ready

Prepared statement support

Database metadata inspection

Connection testing

Support for both Java 8 and Java 21'

print_step "Making scripts executable..."
chmod +x run.sh
chmod +x download-drivers.sh

print_step "Project setup complete!"
echo ""
print_status "Project directory: $PROJECT_DIR"
print_status "Next steps:"
echo " 1. cd $PROJECT_DIR"
echo " 2. ./download-drivers.sh # Download JDBC drivers"
echo " 3. Edit JDBS_Connection.ini # Configure your database connection"
echo " 4. ./run.sh # Run the application"
echo ""
print_warning "Don'''t forget to update JDBS_Connection.ini with your actual database credentials!"

Display final project structure
print_step "Final project structure:"
find . -type f -name ".java" -o -name ".ini" -o -name ".sh" -o -name ".bat" -o -name "*.md" | sort

text

## How to Use This Script

1. **Save the script** as `create-mssql-client.sh`

2. **Make it executable:**
```bash
chmod +x create-mssql-client.sh
Run the script:

bash
./create-mssql-client.sh
Follow the setup steps:

bash
cd mssql-jdbc-client
./download-drivers.sh
# Edit JDBS_Connection.ini with your database details
./run.sh
What the Script Creates
The script will create the following complete project structure:

text
mssql-jdbc-client/
├── src/
│   ├── DatabaseConfig.java
│   ├── MSSQLClient.java
│   └── MSSQLClientExample.java
├── lib/                    # (Empty - drivers will be downloaded)
├── classes/               # (Empty - for compiled classes)
├── JDBS_Connection.ini    # Configuration template
├── run.sh                 # Linux/Mac run script
├── run.bat                # Windows run script
├── download-drivers.sh    # Driver download script
└── README.md             # Project documentation
One-Command Setup
You can also create and run everything in one command:

bash
# Create the project
./create-mssql-client.sh

# Download drivers and run (from within the project directory)
cd mssql-jdbc-client && ./download-drivers.sh && echo "Please edit JDBS_Connection.ini with your credentials" && echo "Then run: ./run.sh"
This script provides a complete, ready-to-run MSSQL JDBC client project with proper directory structure and all necessary files!

I will use it in cygwin client bash on Windows
Perfect! For Cygwin bash on Windows, we need to make some adjustments to handle Windows paths and Cygwin-specific considerations. Here's the modified script:

create-mssql-client-cygwin.sh
bash
#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Detect if running in Cygwin
if [[ $(uname -o) == "Cygwin" ]]; then
    IS_CYGWIN=true
    print_status "Cygwin environment detected"
else
    IS_CYGWIN=false
fi

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Function to create directory if it doesn't exist
create_dir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
        print_status "Created directory: $1"
    else
        print_warning "Directory already exists: $1"
    fi
}

# Function to create file with content
create_file() {
    if [ ! -f "$1" ]; then
        cat > "$1" << EOL
$2
EOL
        print_status "Created file: $1"
    else
        print_warning "File already exists: $1"
    fi
}

# Function to convert Cygwin path to Windows path
cygpath_to_win() {
    if [ "$IS_CYGWIN" = true ]; then
        cygpath -w "$1"
    else
        echo "$1"
    fi
}

# Function to find Java installations on Windows
find_java_windows() {
    local java_versions=()
    
    # Check common Java installation paths
    local possible_paths=(
        "/cygdrive/c/Program Files/Java"
        "/cygdrive/c/Program Files (x86)/Java"
        "/cygdrive/c/Java"
    )
    
    for path in "${possible_paths[@]}"; do
        if [ -d "$path" ]; then
            for jdk in "$path"/*; do
                if [ -d "$jdk" ] && [[ "$jdk" =~ jdk[0-9] ]]; then
                    local version=$(basename "$jdk" | grep -o '[0-9]\+' | head -1)
                    if [ -n "$version" ]; then
                        java_versions+=("$version:$jdk")
                    fi
                fi
            done
        fi
    done
    
    echo "${java_versions[@]}"
}

# Main script
print_step "Starting MSSQL JDBC Client Project Setup for Cygwin..."

# Create project directory
PROJECT_DIR="mssql-jdbc-client"
create_dir "$PROJECT_DIR"
cd "$PROJECT_DIR"

print_step "Creating directory structure..."
create_dir "src"
create_dir "lib"
create_dir "classes"

print_step "Creating Java source files..."

# DatabaseConfig.java
create_file "src/DatabaseConfig.java" 'import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class DatabaseConfig {
    private String server;
    private int port;
    private String databaseName;
    private String username;
    private String password;
    private String instanceName;
    private boolean trustServerCertificate;
    private boolean encrypt;
    private int loginTimeout;

    public DatabaseConfig(String configFile) throws IOException {
        Properties props = new Properties();
        try (FileInputStream fis = new FileInputStream(configFile)) {
            props.load(fis);
        }
        
        this.server = props.getProperty("server", "localhost");
        this.port = Integer.parseInt(props.getProperty("port", "1433"));
        this.databaseName = props.getProperty("databaseName", "");
        this.username = props.getProperty("username", "");
        this.password = props.getProperty("password", "");
        this.instanceName = props.getProperty("instanceName", "");
        this.trustServerCertificate = Boolean.parseBoolean(
            props.getProperty("trustServerCertificate", "true"));
        this.encrypt = Boolean.parseBoolean(props.getProperty("encrypt", "false"));
        this.loginTimeout = Integer.parseInt(props.getProperty("loginTimeout", "30"));
    }

    // Getters
    public String getServer() { return server; }
    public int getPort() { return port; }
    public String getDatabaseName() { return databaseName; }
    public String getUsername() { return username; }
    public String getPassword() { return password; }
    public String getInstanceName() { return instanceName; }
    public boolean isTrustServerCertificate() { return trustServerCertificate; }
    public boolean isEncrypt() { return encrypt; }
    public int getLoginTimeout() { return loginTimeout; }

    public String getConnectionUrl() {
        StringBuilder url = new StringBuilder();
        url.append("jdbc:sqlserver://").append(server).append(":").append(port);
        
        if (!instanceName.isEmpty()) {
            url.append(";instanceName=").append(instanceName);
        }
        
        url.append(";databaseName=").append(databaseName);
        url.append(";trustServerCertificate=").append(trustServerCertificate);
        url.append(";encrypt=").append(encrypt);
        url.append(";loginTimeout=").append(loginTimeout);
        
        return url.toString();
    }
}'

# MSSQLClient.java
create_file "src/MSSQLClient.java" 'import java.sql.*;
import java.io.IOException;

public class MSSQLClient {
    private DatabaseConfig config;
    private Connection connection;

    public MSSQLClient(String configFile) throws IOException {
        this.config = new DatabaseConfig(configFile);
    }

    public boolean connect() {
        try {
            // Load SQL Server JDBC driver
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            
            // Establish connection
            connection = DriverManager.getConnection(
                config.getConnectionUrl(), 
                config.getUsername(), 
                config.getPassword()
            );
            
            System.out.println("Connected to SQL Server successfully!");
            return true;
            
        } catch (ClassNotFoundException e) {
            System.err.println("SQL Server JDBC Driver not found: " + e.getMessage());
            return false;
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
            return false;
        }
    }

    public void disconnect() {
        if (connection != null) {
            try {
                connection.close();
                System.out.println("Disconnected from SQL Server.");
            } catch (SQLException e) {
                System.err.println("Error closing connection: " + e.getMessage());
            }
        }
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        Statement statement = connection.createStatement();
        return statement.executeQuery(sql);
    }

    public int executeUpdate(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        Statement statement = connection.createStatement();
        return statement.executeUpdate(sql);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        if (connection == null || connection.isClosed()) {
            throw new SQLException("Connection is not established");
        }
        
        return connection.prepareStatement(sql);
    }

    // Test database connection
    public boolean testConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                String testQuery = "SELECT 1 AS test_result";
                ResultSet rs = executeQuery(testQuery);
                if (rs.next()) {
                    System.out.println("Database connection test: PASSED");
                    return true;
                }
            }
            return false;
        } catch (SQLException e) {
            System.err.println("Connection test failed: " + e.getMessage());
            return false;
        }
    }

    // Get database metadata
    public void printDatabaseInfo() {
        try {
            if (connection != null && !connection.isClosed()) {
                DatabaseMetaData metaData = connection.getMetaData();
                System.out.println("Database Product: " + metaData.getDatabaseProductName());
                System.out.println("Database Version: " + metaData.getDatabaseProductVersion());
                System.out.println("Driver Name: " + metaData.getDriverName());
                System.out.println("Driver Version: " + metaData.getDriverVersion());
            }
        } catch (SQLException e) {
            System.err.println("Error getting database info: " + e.getMessage());
        }
    }
}'

# MSSQLClientExample.java
create_file "src/MSSQLClientExample.java" 'import java.sql.ResultSet;
import java.sql.SQLException;

public class MSSQLClientExample {
    public static void main(String[] args) {
        MSSQLClient client = null;
        
        try {
            // Initialize client with configuration file
            client = new MSSQLClient("JDBS_Connection.ini");
            
            // Connect to database
            if (client.connect()) {
                // Test connection
                client.testConnection();
                
                // Print database information
                client.printDatabaseInfo();
                
                // Example: Execute a simple query
                System.out.println("\\nExecuting sample query:");
                String query = "SELECT name FROM sys.databases WHERE database_id > 4";
                ResultSet rs = client.executeQuery(query);
                
                System.out.println("User databases:");
                while (rs.next()) {
                    System.out.println("- " + rs.getString("name"));
                }
                
                // Example: Using prepared statement
                String preparedQuery = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = ?";
                var pstmt = client.prepareStatement(preparedQuery);
                pstmt.setString(1, "BASE TABLE");
                
                ResultSet tables = pstmt.executeQuery();
                System.out.println("\\nTables in database:");
                while (tables.next()) {
                    System.out.println("- " + tables.getString("TABLE_NAME"));
                }
            }
            
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (client != null) {
                client.disconnect();
            }
        }
    }
}'

print_step "Creating configuration file..."

# JDBS_Connection.ini
create_file "JDBS_Connection.ini" '[database]
server=localhost
port=1433
databaseName=master
username=sa
password=your_password_here
instanceName=
trustServerCertificate=true
encrypt=false
loginTimeout=30'

print_step "Creating Cygwin-optimized run script..."

# run-cygwin.sh
create_file "run-cygwin.sh" '#!/bin/bash

# MSSQL JDBC Client Runner for Cygwin

# Colors for output
RED="\\033[0;31m"
GREEN="\\033[0;32m"
YELLOW="\\033[1;33m"
BLUE="\\033[0;34m"
NC="\\033[0m" # No Color

echo -e "${GREEN}MSSQL JDBC Client Runner (Cygwin)${NC}"

# Detect Cygwin
if [[ $(uname -o) != "Cygwin" ]]; then
    echo -e "${RED}This script is designed for Cygwin environment${NC}"
    exit 1
fi

# Function to find Java installations
find_java_installations() {
    local java_versions=()
    
    echo -e "${BLUE}Searching for Java installations...${NC}"
    
    # Check Windows Java installations
    local possible_paths=(
        "/cygdrive/c/Program Files/Java"
        "/cygdrive/c/Program Files (x86)/Java"
        "/cygdrive/c/Java"
    )
    
    for path in "${possible_paths[@]}"; do
        if [ -d "$path" ]; then
            for jdk in "$path"/*; do
                if [ -d "$jdk" ] && [[ "$jdk" =~ jdk[0-9] ]]; then
                    local version=$(basename "$jdk" | grep -o '[0-9]\+' | head -1)
                    if [ -n "$version" ] && [ -f "$jdk/bin/javac.exe" ]; then
                        java_versions+=("$version:$jdk")
                        echo -e "  Found Java $version: $jdk"
                    fi
                fi
            done
        fi
    done
    
    # Check if java is in PATH
    if command -v java > /dev/null 2>&1; then
        local path_java=$(which java)
        local path_javac=$(which javac 2>/dev/null || echo "")
        echo -e "  Found Java in PATH: $path_java"
        if [ -n "$path_javac" ]; then
            java_versions+=("PATH:$path_java")
        fi
    fi
    
    if [ ${#java_versions[@]} -eq 0 ]; then
        echo -e "${YELLOW}No Java installations found!${NC}"
        return 1
    fi
    
    return 0
}

# Function to set up Java environment
setup_java() {
    echo ""
    echo -e "${BLUE}Available Java options:${NC}"
    echo "1. Use Java from PATH (if available)"
    echo "2. Auto-detect and use highest Java version"
    echo "3. Manual Java path selection"
    echo -n "Select option (1-3): "
    read option
    
    case $option in
        1)
            if command -v java > /dev/null 2>&1; then
                JAVA_CMD="java"
                JAVAC_CMD="javac"
                echo -e "${GREEN}Using Java from PATH${NC}"
                java -version
            else
                echo -e "${RED}Java not found in PATH${NC}"
                return 1
            fi
            ;;
        2)
            # Auto-detect highest Java version
            highest_version=0
            highest_path=""
            
            for entry in $(find "/cygdrive/c/Program Files/Java" "/cygdrive/c/Program Files (x86)/Java" -name "jdk*" -type d 2>/dev/null); do
                version=$(echo "$entry" | grep -o '[0-9]\+' | head -1)
                if [ -n "$version" ] && [ "$version" -gt "$highest_version" ] && [ -f "$entry/bin/javac.exe" ]; then
                    highest_version=$version
                    highest_path=$entry
                fi
            done
            
            if [ -n "$highest_path" ]; then
                JAVA_CMD="$highest_path/bin/java.exe"
                JAVAC_CMD="$highest_path/bin/javac.exe"
                echo -e "${GREEN}Using Java $highest_version from: $highest_path${NC}"
                "$JAVA_CMD" -version
            else
                echo -e "${RED}No Java installation found${NC}"
                return 1
            fi
            ;;
        3)
            echo -n "Enter full path to Java bin directory (e.g., /cygdrive/c/Program Files/Java/jdk1.8.0_351/bin): "
            read java_path
            if [ -f "$java_path/javac.exe" ]; then
                JAVA_CMD="$java_path/java.exe"
                JAVAC_CMD="$java_path/javac.exe"
                echo -e "${GREEN}Using Java from: $java_path${NC}"
                "$JAVA_CMD" -version
            else
                echo -e "${RED}Invalid Java path${NC}"
                return 1
            fi
            ;;
        *)
            echo -e "${RED}Invalid option${NC}"
            return 1
            ;;
    esac
    
    return 0
}

# Function to select JDBC driver based on Java version
select_jdbc_driver() {
    local java_version_output=$("$JAVA_CMD" -version 2>&1)
    local java_version=$(echo "$java_version_output" | grep -o '" [0-9]\+' | grep -o '[0-9]\+' | head -1)
    
    if [ -z "$java_version" ]; then
        # Try alternative version detection
        java_version=$(echo "$java_version_output" | head -1 | grep -o '[0-9]' | head -1)
    fi
    
    echo -e "${BLUE}Detected Java version: ${java_version:-unknown}${NC}"
    
    case $java_version in
        8|1.8)
            JDBC_JAR="lib/mssql-jdbc-12.4.1.jre8.jar"
            echo -e "${GREEN}Using JDBC driver for Java 8${NC}"
            ;;
        21|17|11|9|10|12|13|14|15|16|18|19|20)
            JDBC_JAR="lib/mssql-jdbc-12.4.1.jre11.jar"
            echo -e "${GREEN}Using JDBC driver for Java 11+${NC}"
            ;;
        *)
            echo -e "${YELLOW}Unknown Java version, trying Java 11+ driver${NC}"
            JDBC_JAR="lib/mssql-jdbc-12.4.1.jre11.jar"
            ;;
    esac
    
    if [ ! -f "$JDBC_JAR" ]; then
        echo -e "${RED}JDBC driver not found: $JDBC_JAR${NC}"
        echo "Please run ./download-drivers.sh first"
        return 1
    fi
}

# Main execution
find_java_installations
if ! setup_java; then
    exit 1
fi

if ! select_jdbc_driver; then
    exit 1
fi

# Check if JDBS_Connection.ini exists
if [ ! -f "JDBS_Connection.ini" ]; then
    echo -e "${RED}Error: JDBS_Connection.ini not found!${NC}"
    exit 1
fi

# Create classes directory if it doesn'\''t exist
mkdir -p classes

# Convert paths to Windows format for Java
WIN_CLASSES_PATH=$(cygpath -w "$(pwd)/classes")
WIN_JDBC_PATH=$(cygpath -w "$(pwd)/$JDBC_JAR")
WIN_SRC_PATH=$(cygpath -w "$(pwd)/src")

echo -e "${BLUE}Compiling Java files...${NC}"
# Compile with Windows paths
"$JAVAC_CMD" -cp "$WIN_JDBC_PATH" -d "$WIN_CLASSES_PATH" "$WIN_SRC_PATH"/*.java

if [ $? -eq 0 ]; then
    echo -e "${GREEN}Compilation successful!${NC}"
    
    echo -e "${BLUE}Running MSSQL Client Example...${NC}"
    "$JAVA_CMD" -cp "$WIN_CLASSES_PATH;$WIN_JDBC_PATH" MSSQLClientExample
else
    echo -e "${RED}Compilation failed!${NC}"
    exit 1
fi'

print_step "Creating download script for JDBC drivers..."

# download-drivers.sh
create_file "download-drivers.sh" '#!/bin/bash

# Script to download MSSQL JDBC drivers for Cygwin

echo "Downloading MSSQL JDBC drivers for Cygwin..."

# Create lib directory if it doesn'\''t exist
mkdir -p lib

# Download Java 8 compatible driver
echo "Downloading Java 8 driver..."
curl -L -o lib/mssql-jdbc-12.4.1.jre8.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre8/mssql-jdbc-12.4.1.jre8.jar

# Download Java 11+ compatible driver (works with Java 21)
echo "Downloading Java 11+ driver..."
curl -L -o lib/mssql-jdbc-12.4.1.jre11.jar https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.1.jre11/mssql-jdbc-12.4.1.jre11.jar

echo "Download complete!"
echo "Files downloaded:"
ls -la lib/'

print_step "Creating Windows batch file as backup..."

# run-windows.bat
create_file "run-windows.bat" '@echo off
title MSSQL JDBC Client Runner (Windows)

echo MSSQL JDBC Client Runner - Windows
echo.

:: Check if JDBC drivers exist
if not exist "lib\\mssql-jdbc-12.4.1.jre8.jar" (
    echo Error: JDBC drivers not found!
    echo Please run download-drivers.sh from Cygwin first
    pause
    exit /b 1
)

:: Check if configuration exists
if not exist "JDBS_Connection.ini" (
    echo Error: JDBS_Connection.ini not found!
    pause
    exit /b 1
)

:: Use Java from PATH
echo Using Java from PATH...
java -version >nul 2>&1
if errorlevel 1 (
    echo Error: Java not found in PATH!
    echo Please ensure Java is installed and in your PATH
    pause
    exit /b 1
)

echo.
echo Compiling Java files...
javac -cp "lib\\mssql-jdbc-12.4.1.jre8.jar" -d classes src\\*.java

if %errorlevel% equ 0 (
    echo Compilation successful!
    echo.
    echo Running MSSQL Client Example...
    java -cp "classes;lib\\mssql-jdbc-12.4.1.jre8.jar" MSSQLClientExample
) else (
    echo Compilation failed!
)

pause'

print_step "Creating Cygwin-specific README..."

# README-CYGWIN.md
create_file "README-CYGWIN.md" '# MSSQL JDBC Client - Cygwin Setup

A Java JDBC client for connecting to Microsoft SQL Server from Cygwin bash on Windows.

## Quick Start

```bash
# 1. Download JDBC drivers
./download-drivers.sh

# 2. Edit configuration file
notepad JDBS_Connection.ini  # or use your favorite editor

# 3. Run the application
./run-cygwin.sh
Configuration
Edit JDBS_Connection.ini with your SQL Server details:

ini
server=localhost
port=1433
databaseName=master
username=sa
password=your_actual_password
trustServerCertificate=true
encrypt=false
Java Setup for Cygwin
The script will automatically detect Java installations. You can:

Use Java from PATH

Auto-detect highest Java version

Manually specify Java path

File Structure
text
mssql-jdbc-client/
├── src/                    # Java source files
├── lib/                    # JDBC driver JAR files
├── classes/                # Compiled Java classes
├── JDBS_Connection.ini     # Database configuration
├── run-cygwin.sh          # Cygwin-optimized run script
├── run-windows.bat        # Windows batch file (backup)
├── download-drivers.sh    # Driver download script
└── README-CYGWIN.md      # This file
Troubleshooting
Java not found: Ensure Java is installed and in PATH, or specify path manually

Connection issues: Verify SQL Server is running and accessible

Path issues: The script uses cygpath to convert paths for Java

Features
Automatic Java detection

Path conversion for Cygwin/Windows interoperability

Support for both Java 8 and Java 11+

Connection testing and metadata inspection'

print_step "Making scripts executable..."
chmod +x run-cygwin.sh
chmod +x download-drivers.sh
chmod +x run-windows.bat

print_step "Project setup complete for Cygwin!"
echo ""
print_status "Project directory: $(pwd)"
print_status "Next steps:"
echo " 1. ./download-drivers.sh # Download JDBC drivers"
echo " 2. Edit JDBS_Connection.ini # Configure database connection"
echo " 3. ./run-cygwin.sh # Run with Cygwin-optimized script"
echo ""
echo "Alternative:"
echo " ./run-windows.bat # Run with Windows batch file"
echo ""
print_warning "Don't forget to update JDBS_Connection.ini with your actual database credentials!"

Display final project structure
print_step "Final project structure:"
tree -I '*.class' 2>/dev/null || find . -type f -name "*.java" -o -name ".ini" -o -name ".sh" -o -name ".bat" -o -name ".md" | sort

Cygwin-specific tips
if [ "$IS_CYGWIN" = true ]; then
echo ""
print_step "Cygwin Tips:"
echo " - Use './run-cygwin.sh' for best results"
echo " - The script automatically handles path conversion"
echo " - Java installations are auto-detected"
echo " - If you have issues, try the Windows batch file as backup"
fi

text

## How to Use in Cygwin

1. **Save the script** in your Cygwin home directory or desired location:
```bash
nano create-mssql-client-cygwin.sh
Make it executable:

bash
chmod +x create-mssql-client-cygwin.sh
Run the script:

bash
./create-mssql-client-cygwin.sh
Follow the setup steps:

bash
cd mssql-jdbc-client
./download-drivers.sh
# Edit the configuration file
notepad JDBS_Connection.ini  # or use vim/nano in Cygwin
./run-cygwin.sh
Key Cygwin-Specific Features
Path Conversion: Uses cygpath to convert between Cygwin and Windows paths

Java Auto-detection: Scans Windows Java installation directories

Windows Batch Backup: Includes a .bat file for running directly from Windows CMD

Cygwin Environment Detection: Automatically adapts to Cygwin environment

Project Structure Created
text
mssql-jdbc-client/
├── src/                    # Java source files
├── lib/                    # JDBC drivers (after download)
├── classes/                # Compiled classes
├── JDBS_Connection.ini     # Database config
├── run-cygwin.sh          # Main Cygwin script
├── run-windows.bat        # Windows backup script
├── download-drivers.sh    # Driver download
└── README-CYGWIN.md      # Cygwin-specific instructions
This script is specifically optimized for Cygwin and will handle the path conversions and Java detection that are unique to the Cygwin environment on Windows!

